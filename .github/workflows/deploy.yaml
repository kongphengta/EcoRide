name: Deploy to VPS

on:
  push:
    branches:
      - master # Ou 'master', ou la branche que vous utilisez pour la production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.ACTION_ECORIDE }} # Utilise le nom de secret que vous avez défini
  
    # - name: Debug SSH_HOST value
    #   run: echo "SSH_HOST secret value is: '${{ secrets.SSH_HOST }}'"      

    - name: Add known hosts
      run: |
          # Vérifie si le secret SSH_HOST est vide
          # set -e # Décommentez si vous voulez que le script échoue à la première erreur
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "Error: Le secret SSH_HOST est vide ou non défini. ssh-keyscan est ignoré."
          # Si une clé d'hôte est absolument nécessaire, faites échouer l'action ici :
          # exit 1 # Décommentez pour faire échouer si SSH_HOST est vide
          else
          mkdir -p ~/.ssh
          # chmod 700 ~/.ssh # Optionnel: permissions plus strictes pour le dossier .ssh
          echo "Tentative de scan de l'hôte : '${{ secrets.SSH_HOST }}'"
          # Mettre la variable SSH_HOST entre guillemets est important
          if ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts; then
          echo "Clé de l'hôte ${{ secrets.SSH_HOST }} ajoutée à known_hosts."
          else
          echo "Avertissement: ssh-keyscan a échoué pour l'hôte ${{ secrets.SSH_HOST }}. La connexion SSH pourrait échouer."
          # exit 1 # Décommentez pour faire échouer le déploiement si ssh-keyscan échoue
          
          fi
          fi

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.ACTION_ECORIDE }} # Répété ici pour appleboy/ssh-action
        port: 22 # Port SSH par défaut, changez si besoin
        script: |
          echo "Connecting to server..."
          cd ${{ secrets.PROJECT_PATH_ON_SERVER }}
          
          echo "Pulling latest changes..."
          git pull origin master # Assurez-vous que 'master' est votre branche de production
          
          echo "Installing Composer dependencies..."
          composer install --no-dev --optimize-autoloader --no-interaction
          
          echo "Running database migrations..."
          php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
          
          echo "Clearing Symfony cache..."
          php bin/console cache:clear --env=prod
          
          echo "Warming up Symfony cache..."
          php bin/console cache:warmup --env=prod

          # Si vous utilisez Webpack Encore ou un autre bundler d'assets, ajoutez les commandes ici
          # echo "Building assets..."
          # npm install
          # npm run build
          
          echo "Deployment finished successfully!"

